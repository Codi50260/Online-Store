----------------
Brief:

Using what you have learned in the frontend and backend
(HTML, CSS, CSS Grid, Command Line, Git, jQuery, JS and a JS framework, PHP, MySQL and AJAX) 
create an online store that provides the user with a full-featured shopping experience (less the Payment Gateway).

Remember to separate the back-end from the front-end, 
you will be strictly marked for how well you keep these two languages apart from each other 
and have not intertwined any PHP with HTML/Javascript.

----------------
Whats expected:

✓ Push your changes to your repository. Remember to push constantly. Use branching and merging for new features.
✓ Your website must be responsive, clear and with neat CSS selectors, working across mobile, tablet, and desktop. 
✓ Homepage - with banner/hero/background_image, featured product section, upcoming collection
✓ About page - include team photos
✓ Lookbook/Gallery page - images to have a subtle zoom-in effect on hover and when you click on them to open in JavaScript gallery
✓ Contact Page - must have a Google map showing the location of the organisation (a contact form that works by adding sanitized entries to a MySQL database)
✓ The navbar must be static or fixed and/or it must be a sticky navbar
✓ Add a logo to the header
✓ Back to Top button/icon - must be a smooth scroll

----------------
Backend:

• 2+ tables with a primary/foreign key relationship
• User must be able to log in, register and change the password
✓ Create an API endpoint(s) - for all data that is pulled into the database and needed to be displayed on the profile page (front-end)
✓ Only relevant user data is pulled in from the database when they are logged in and displayed on their profile page 
✓ Data on the server is stored securely and persists between user logouts

----------------
Shop Page:

✓ Create a shop/storefront page as well as individual product pages
✓ User must be able to click on an "Add to cart" button for each product 
✓ The product will have a method that will add it to the 'cart' - must update the database and the API endpoints
✓ A basket will show the number of products added to the basket, description, the total cost
✓ If a product is added to the cart they can remove it as well - make sure this doesnt add to the database immediately
✓ Use Methods, Constructor functions, and prototypes to make this page